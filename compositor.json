{
  "name": "Kikobeats/whoops",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "",
  "branch": "",
  "style": {
    "name": "Default",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/BannerHeader",
      "article": "article/BasicArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "-apple-system, BlinkMacSystemFont, sans-serif",
    "fontWeight": 400,
    "bold": 600,
    "lineHeight": 1.5,
    "typeScale": [
      72,
      48,
      24,
      20,
      16,
      14,
      12
    ],
    "monospace": "Menlo, monospace",
    "heading": {
      "fontFamily": null,
      "fontStyle": null,
      "fontWeight": 600,
      "lineHeight": 1.25,
      "textTransform": null,
      "letterSpacing": null
    },
    "h0": {},
    "h1": {},
    "h2": {},
    "h3": {},
    "h4": {},
    "h5": {},
    "h6": {},
    "alternativeText": {},
    "space": [
      0,
      8,
      16,
      32,
      48,
      64,
      96
    ],
    "layout": {
      "maxWidth": 1024,
      "centered": false
    },
    "colors": {
      "text": "#111",
      "background": "#fff",
      "primary": "#08e",
      "secondary": "#059",
      "highlight": "#e08",
      "border": "#ddd",
      "muted": "#eee"
    },
    "border": {
      "width": 1,
      "radius": 2
    },
    "link": {},
    "button": {
      "hover": {
        "boxShadow": "inset 0 0 0 999px rgba(0, 0, 0, .125)"
      }
    },
    "input": {},
    "body": {
      "margin": 0
    },
    "breakpoints": {
      "xs": "@media screen and (max-width:40em)",
      "sm": "@media screen and (min-width:40em)",
      "md": "@media screen and (min-width:52em)",
      "lg": "@media screen and (min-width:64em)"
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/Kikobeats/whoops",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/whoops",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "whoops",
      "subhead": "It makes simple create qualified errors.",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "whoops: It makes simple create qualified errors.",
          "url": ""
        },
        {
          "component": "ui/GithubButton",
          "user": "Kikobeats",
          "repo": "whoops"
        }
      ],
      "text": "v4.0.1"
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "\n<p><img src=\"https://img.shields.io/github/tag/Kikobeats/whoops.svg?style=flat-square\">\n<a href=\"https://travis-ci.org/Kikobeats/whoops\"><img src=\"http://img.shields.io/travis/Kikobeats/whoops/master.svg?style=flat-square\"></a>\n<a href=\"https://coveralls.io/github/Kikobeats/whoops\"><img src=\"https://img.shields.io/coveralls/Kikobeats/whoops.svg?style=flat-square\"></a>\n<a href=\"https://david-dm.org/Kikobeats/whoops\"><img src=\"http://img.shields.io/david/Kikobeats/whoops.svg?style=flat-square\"></a>\n<a href=\"https://david-dm.org/Kikobeats/whoops#info=devDependencies\"><img src=\"http://img.shields.io/david/dev/Kikobeats/whoops.svg?style=flat-square\"></a>\n<a href=\"https://www.npmjs.org/package/whoops\"><img src=\"http://img.shields.io/npm/dm/whoops.svg?style=flat-square\"></a>\n<a href=\"https://paypal.me/kikobeats\"><img src=\"https://img.shields.io/badge/donate-paypal-blue.svg?style=flat-square\"></a></p>\n<blockquote>\n<p>It makes simple throw qualified errors. Inspired in <a href=\"https://github.com/rvagg/node-errno\">errno</a>, <a href=\"https://github.com/floatdrop/create-error-class\">create-error-class</a> and <a href=\"https://github.com/wooorm/fault\">fault</a>.</p>\n</blockquote>\n<h2>Why</h2>\n<ul>\n<li>An easy way to create qualified errors.</li>\n<li>Using the standard <code>Error</code> interface in browser and NodeJS.</li>\n<li>Attach extra information, being flexible with whatever user case.</li>\n</ul>\n<p>This library is a compromise to provide a clean API for use <code>Error</code> native class.</p>\n<h2>Install</h2>\n<pre>npm install whoops --save</pre><p>Basically it turns:</p>\n<pre><span class=\"hljs-keyword\">const</span> error = <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&apos;Something is wrong&apos;</span>)\nerror.name = <span class=\"hljs-string\">&apos;DAMNError&apos;</span>\n<span class=\"hljs-keyword\">throw</span> error <span class=\"hljs-comment\">// =&gt; &apos;DAMNError: ENOFILE, Something is wrong&apos;</span></pre><p>Into a one line more productive declaration:</p>\n<pre><span class=\"hljs-keyword\">const</span> whoops = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;whoops&apos;</span>)\n<span class=\"hljs-keyword\">const</span> userError = whoops(<span class=\"hljs-string\">&apos;UserError&apos;</span>)\n\n<span class=\"hljs-keyword\">throw</span> userError(<span class=\"hljs-string\">&apos;User not found&apos;</span>) <span class=\"hljs-comment\">// =&gt; &apos;UserError: User not found&apos;</span></pre><h2>Creating Qualified Errors</h2>\n<p>Call <code>whoops</code> to get a constructor function. Every time you call the constructor, you get an <code>Error</code> instance:</p>\n<pre><span class=\"hljs-keyword\">const</span> whoops = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;whoops&apos;</span>)\n<span class=\"hljs-keyword\">const</span> myError = whoops()\n<span class=\"hljs-keyword\">throw</span> myError()</pre><p>Create domain specific errors providing a <code>className</code> as first argument:</p>\n<pre><span class=\"hljs-keyword\">const</span> whoops = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;whoops&apos;</span>)\n<span class=\"hljs-keyword\">const</span> userError = whoops(<span class=\"hljs-string\">&apos;userError&apos;</span>)\n<span class=\"hljs-keyword\">throw</span> userError()</pre><p>The qualified error will be extends from <code>Error</code>:</p>\n<pre><span class=\"hljs-keyword\">const</span> whoops = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;whoops&apos;</span>)\n<span class=\"hljs-keyword\">const</span> userError = whoops(<span class=\"hljs-string\">&apos;userError&apos;</span>)\n<span class=\"hljs-keyword\">const</span> error = userError()\n<span class=\"hljs-built_in\">console</span>.log(error <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Error</span>); <span class=\"hljs-comment\">// =&gt; true</span></pre><p>Attach extra information passing a <code>props</code> as second argument:</p>\n<pre><span class=\"hljs-keyword\">const</span> whoops = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;whoops&apos;</span>)\n<span class=\"hljs-keyword\">const</span> userError = whoops(<span class=\"hljs-string\">&apos;userError&apos;</span>, {<span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">&apos;ENOVALID&apos;</span>})\n<span class=\"hljs-keyword\">const</span> err = userError()\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`My error code is <span class=\"hljs-subst\">${err.code}</span>`</span>) <span class=\"hljs-comment\">// =&gt; My error code is ENOVALID</span></pre><p>You can associate dynamic <code>props</code> as well:</p>\n<pre><span class=\"hljs-keyword\">const</span> whoops = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;whoops&apos;</span>)\n<span class=\"hljs-keyword\">const</span> userError = whoops(<span class=\"hljs-string\">&apos;userError&apos;</span>, {\n  <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">&apos;ENOVALID&apos;</span>,\n  <span class=\"hljs-attr\">message</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> <span class=\"hljs-string\">`User &apos;<span class=\"hljs-subst\">${props.username}</span>&apos; not found`</span>\n})\n\n<span class=\"hljs-keyword\">const</span> err = userError({<span class=\"hljs-attr\">username</span>: <span class=\"hljs-string\">&apos;kiko&apos;</span>})\n<span class=\"hljs-built_in\">console</span>.log(err.message) <span class=\"hljs-comment\">// =&gt; User &apos;kiko&apos; not found</span></pre><h2>Error Types</h2>\n<p>By default you will get <code>Error</code> instances calling whoops, but you can get different errors calling the properly method:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a></td>\n<td>whoops</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a></td>\n<td>whoops.type</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a></td>\n<td>whoops.range</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a></td>\n<td>whoops.eval</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a></td>\n<td>whoops.syntax</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a></td>\n<td>whoops.reference</td>\n</tr>\n<tr>\n<td><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a></td>\n<td>whoops.uri</td>\n</tr>\n</tbody>\n</table>\n<h2>Extra: Always throw/return an Error!</h2>\n<p>If you code implementation is</p>\n<ul>\n<li><strong>synchronous</strong>, throws <code>Error</code>. If you just return the <code>Error</code> nothings happens!.</li>\n<li><strong>asynchronous</strong>, returns <code>Error</code> in the first argument of the callback (or using promises).</li>\n</ul>\n<p>About asynchronous code, is correct return a <code>Object</code> that is not a <code>Error</code> in the first argument of the callback to express unexpected behavior, but the <code>Object</code> doesn&apos;t have a type and definitely can&apos;t  follow a error interface for determinate a special behavior:</p>\n<pre>callback(<span class=\"hljs-string\">&apos;LOL something was wrong&apos;</span>) <span class=\"hljs-comment\">// poor</span>\ncallback({<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&apos;LOL something was wrong&apos;</span> } <span class=\"hljs-comment\">// poor, but better</span>\ncallback(whoops(<span class=\"hljs-string\">&apos;LOL, something was wrong&apos;</span>) <span class=\"hljs-comment\">// BEST!</span></pre><p>Passing always an <code>Error</code> you can can associated different type of error with different behavior:</p>\n<pre><span class=\"hljs-keyword\">switch</span> (err.name) {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&apos;JSONError&apos;</span>:\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;your error logic here&apos;</span>)\n    <span class=\"hljs-keyword\">break</span>\n  <span class=\"hljs-keyword\">default</span>:\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&apos;undefined code&apos;</span>)\n    <span class=\"hljs-keyword\">break</span>\n};</pre><h2>License</h2>\n<p>MIT &#xA9; <a href=\"http://www.kikobeats.com\">Kiko Beats</a></p>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/Kikobeats/whoops",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/Kikobeats",
          "text": "Kikobeats"
        }
      ]
    }
  ]
}